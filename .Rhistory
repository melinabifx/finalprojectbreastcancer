J_nb <- sen_nb + sp_nb - 1
mcc_nb <- ((nbdf[4,3]*nbdf[1,3]) - (nbdf[2,3]*nbdf[3,3])) / sqrt((nbdf[4,3]+nbdf[2,3])*(nbdf[4,3]+nbdf[3,3])*(nbdf[1,3]+nbdf[2,3])*(nbdf[1,3]+nbdf[3,3]))
```
nbmodel <- naiveBayes(bc_train_data, bc_train_label)
nbpred <- predict(nbmodel, bc_test_data)
library(finalprojectbreastcancer)
library(finalprojectbreastcancer)
knitr::opts_chunk$set(echo = TRUE)
library(finalprojectbreastcancer)
bcancer <-read.csv(file="C:/Users/Admin/Documents/finalprojectbreastcancer/data-raw/data.csv",stringsAsFactors = FALSE, header= TRUE)
##obtaining the data
#make data-raw directory
#usethis::use_data_raw()        #uncomment if required
#print the columns of the dataset.
print(colnames(bcancer))
##exploring the data
knitr::kable(head(bcancer))
##preparing the data. (bc=breast cancer)
#randomly shuffle the rows
set.seed(1)
bc <- bcancer[sample(nrow(bcancer)),]
#remove all the rows that contain missing data
bc <- na.omit(bc)
#divide the data into training and testing sets corresponding to 80% and 20% of data respectively.
n <- nrow(bc)
ntrain <- round(0.8*n)
bc_train <- bc[1:ntrain,]
bc_test <- bc[(ntrain+1):n,]
#creating the data structures corresponding to the outcome of the experiment to be predicted by ML algorithm.
bc_train_label <- bc_train[,ncol(bc_train)]
bc_test_label <- bc_test[, ncol(bc_test)]
#check if the outcome are numeric, because we want to predict numeric outcomes.
is.numeric(bc_train_label)        #should be TRUE
is.numeric(bc_test_label)         #should be TRUE
#creating the testing data used as the input data by ML algorithm to predict the outcome. Need to ignore predict labels.
bc_train_data <- bc_train[,1:(ncol(bc_train)-1)]
bc_test_data <- bc_test[,1:(ncol(bc_test)-1)]
#read the newly created package finalprojectbreastcancer and check the data variables in it(training and testing).
data(bcancer, package = "finalprojectbreastcancer")
ls(pattern = "ha.*")
#look the 1st line of the training data and training outcome.
head(bc_train_data)
head(bc_train_label)
#convert the outcome into logical
bc_train_label <- as.logical(bc_train_label)
bc_test_label <- as.logical(bc_test_label)
# Summary statistics of the variables:
data("data")
summary(bcancer[c("radius_mean")])
library(C50)
library(class)
library(e1071)
#knnresult <- knn(bc_train_data, bc_test_data, bc_train_label)
#convert knnresult into logical
#knnresult <- as.logical(knnresult)
nbmodel <- naiveBayes(bc_train_data, bc_train_label)
nbpred <- predict(nbmodel, bc_test_data)
nbmodel <- naiveBayes(bc_train_data, bc_train_label)
nbpred <- predict(nbmodel, bc_test_data)
dtmodel <- C5.0(x=bc_train_data, y=factor(bc_train_label))
summary(dtmodel)
dtpred <- predict(dtmodel, bc_test_data)
knitr::opts_chunk$set(echo = TRUE)
library(finalprojectbreastcancer)
bcancer <-read.csv(file="C:/Users/Admin/Documents/finalprojectbreastcancer/data-raw/data.csv",stringsAsFactors = FALSE, header= TRUE)
##obtaining the data
#make data-raw directory
#usethis::use_data_raw()        #uncomment if required
#print the columns of the dataset.
print(colnames(bcancer))
##exploring the data
knitr::kable(head(bcancer))
##preparing the data. (bc=breast cancer)
#randomly shuffle the rows
set.seed(1)
bc <- bcancer[sample(nrow(bcancer)),]
#remove all the rows that contain missing data
bc <- na.omit(bc)
#divide the data into training and testing sets corresponding to 80% and 20% of data respectively.
n <- nrow(bc)
ntrain <- round(0.8*n)
bc_train <- bc[1:ntrain,]
bc_test <- bc[(ntrain+1):n,]
#creating the data structures corresponding to the outcome of the experiment to be predicted by ML algorithm.
bc_train_label <- bc_train[,ncol(bc_train)]
bc_test_label <- bc_test[, ncol(bc_test)]
#check if the outcome are numeric, because we want to predict numeric outcomes.
is.numeric(bc_train_label)        #should be TRUE
is.numeric(bc_test_label)         #should be TRUE
#creating the testing data used as the input data by ML algorithm to predict the outcome. Need to ignore predict labels.
bc_train_data <- bc_train[,1:(ncol(bc_train)-1)]
bc_test_data <- bc_test[,1:(ncol(bc_test)-1)]
#read the newly created package finalprojectbreastcancer and check the data variables in it(training and testing).
data(bcancer, package = "finalprojectbreastcancer")
ls(pattern = "ha.*")
#look the 1st line of the training data and training outcome.
head(bc_train_data)
head(bc_train_label)
#convert the outcome into logical
bc_train_label <- as.logical(bc_train_label)
bc_test_label <- as.logical(bc_test_label)
knitr::opts_chunk$set(echo = TRUE)
library(finalprojectbreastcancer)
bcancer <-read.csv(file="C:/Users/Admin/Documents/finalprojectbreastcancer/data-raw/data.csv",stringsAsFactors = FALSE, header= TRUE)
##obtaining the data
#make data-raw directory
#usethis::use_data_raw()        #uncomment if required
#print the columns of the dataset.
print(colnames(bcancer))
##exploring the data
knitr::kable(head(bcancer))
##preparing the data. (bc=breast cancer)
#randomly shuffle the rows
set.seed(1)
bc <- bcancer[sample(nrow(bcancer)),]
#remove all the rows that contain missing data
bc <- na.omit(bc)
#divide the data into training and testing sets corresponding to 80% and 20% of data respectively.
n <- nrow(bc)
ntrain <- round(0.8*n)
bc_train <- bc[1:ntrain,]
bc_test <- bc[(ntrain+1):n,]
#creating the data structures corresponding to the outcome of the experiment to be predicted by ML algorithm.
bc_train_label <- bc_train[,ncol(bc_train)]
bc_test_label <- bc_test[, ncol(bc_test)]
#check if the outcome are numeric, because we want to predict numeric outcomes.
is.numeric(bc_train_label)        #should be TRUE
is.numeric(bc_test_label)         #should be TRUE
#creating the testing data used as the input data by ML algorithm to predict the outcome. Need to ignore predict labels.
bc_train_data <- bc_train[,1:(ncol(bc_train)-1)]
bc_test_data <- bc_test[,1:(ncol(bc_test)-1)]
#read the newly created package finalprojectbreastcancer and check the data variables in it(training and testing).
data(bcancer, package = "finalprojectbreastcancer")
ls(pattern = "ha.*")
#look the 1st line of the training data and training outcome.
head(bc_train_data)
head(bc_train_label)
#convert the outcome into logical
bc_train_label <- as.logical(bc_train_label)
bc_test_label <- as.logical(bc_test_label)
# Summary statistics of the variables:
data("data")
summary(bcancer[c("radius_mean")])
library(C50)
library(class)
library(e1071)
#knnresult <- knn(bc_train_data, bc_test_data, bc_train_label)
#convert knnresult into logical
#knnresult <- as.logical(knnresult)
nbmodel <- naiveBayes(bc_train_data, bc_train_label)
nbpred <- predict(nbmodel, bc_test_data)
data("data")
knitr::opts_chunk$set(echo = TRUE)
library(finalprojectbreastcancer)
bcancer <-read.csv(file="C:/Users/Admin/Documents/finalprojectbreastcancer/data-raw/data.csv",stringsAsFactors = FALSE, header= TRUE)
##obtaining the data
#make data-raw directory
#usethis::use_data_raw()        #uncomment if required
#print the columns of the dataset.
print(colnames(bcancer))
##exploring the data
knitr::kable(head(bcancer))
##preparing the data. (bc=breast cancer)
#randomly shuffle the rows
set.seed(1)
bc <- bcancer[sample(nrow(bcancer)),]
#remove all the rows that contain missing data
bc <- na.omit(bc)
#divide the data into training and testing sets corresponding to 80% and 20% of data respectively.
n <- nrow(bc)
ntrain <- round(0.8*n)
bc_train <- bc[1:ntrain,]
bc_test <- bc[(ntrain+1):n,]
#creating the data structures corresponding to the outcome of the experiment to be predicted by ML algorithm.
bc_train_label <- bc_train[,ncol(bc_train)]
bc_test_label <- bc_test[,ncol(bc_test)]
#check if the outcome are numeric, because we want to predict numeric outcomes.
is.numeric(bc_train_label)        #should be TRUE
is.numeric(bc_test_label)         #should be TRUE
#creating the testing data used as the input data by ML algorithm to predict the outcome. Need to ignore predict labels.
bc_train_data <- bc_train[,1:(ncol(bc_train)-1)]
bc_test_data <- bc_test[,1:(ncol(bc_test)-1)]
#read the newly created package finalprojectbreastcancer and check the data variables in it(training and testing).
data(bcancer, package = "finalprojectbreastcancer")
ls(pattern = "ha.*")
#look the 1st line of the training data and training outcome.
head(bc_train_data)
head(bc_train_label)
#convert the outcome into logical
bc_train_label <- as.logical(bc_train_label)
bc_test_label <- as.logical(bc_test_label)
bc_test_data
bc_train_data
knitr::opts_chunk$set(echo = TRUE)
library(finalprojectbreastcancer)
bcancer <-read.csv(file="C:/Users/Admin/Documents/finalprojectbreastcancer/data-raw/data.csv",stringsAsFactors = FALSE, header= TRUE)
##obtaining the data
#make data-raw directory
#usethis::use_data_raw()        #uncomment if required
#print the columns of the dataset.
print(colnames(bcancer))
##exploring the data
knitr::kable(head(bcancer))
##preparing the data. (bc=breast cancer)
#randomly shuffle the rows
set.seed(1)
bc <- bcancer[sample(nrow(bcancer)),]
#remove all the rows that contain missing data
bc <- na.omit(bc)
#divide the data into training and testing sets corresponding to 80% and 20% of data respectively.
n <- nrow(bc)
ntrain <- round(0.8*n)
bc_train <- bc[1:ntrain,]
bc_test <- bc[(ntrain+1):n,]
#creating the data structures corresponding to the outcome of the experiment to be predicted by ML algorithm.
bc_train_label <- bc_train[,ncol(bc_train)]
bc_test_label <- bc_test[,ncol(bc_test)]
#check if the outcome are numeric, because we want to predict numeric outcomes.
is.numeric(bc_train_label)        #should be TRUE
is.numeric(bc_test_label)         #should be TRUE
#creating the testing data used as the input data by ML algorithm to predict the outcome. Need to ignore predict labels.
bc_train_data <- bc_train[,1:(ncol(bc_train)-1)]
bc_test_data <- bc_test[,1:(ncol(bc_test)-1)]
#read the newly created package finalprojectbreastcancer and check the data variables in it(training and testing).
data(bcancer, package = "finalprojectbreastcancer")
ls(pattern = "ha.*")
#look the 1st line of the training data and training outcome.
head(bc_train_data)
head(bc_train_label)
#convert the outcome into logical
bc_train_label <- as.logical(bc_train_label)
bc_test_label <- as.logical(bc_test_label)
# Summary statistics of the variables:
summary(bcancer[c("radius_mean")])
library(C50)
library(class)
library(e1071)
#knnresult <- knn(bc_train_data, bc_test_data, bc_train_label)
#convert knnresult into logical
#knnresult <- as.logical(knnresult)
nbmodel <- naiveBayes(bc_train_data, bc_train_label)
nbpred <- predict(nbmodel, bc_test_data)
knitr::opts_chunk$set(echo = TRUE)
library(finalprojectbreastcancer)
bcancer <-read.csv(file="C:/Users/Admin/Documents/finalprojectbreastcancer/data-raw/data.csv",stringsAsFactors = FALSE, header= TRUE)
##obtaining the data
#make data-raw directory
#usethis::use_data_raw()        #uncomment if required
#print the columns of the dataset.
print(colnames(bcancer))
##exploring the data
knitr::kable(head(bcancer))
##preparing the data. (bc=breast cancer)
#randomly shuffle the rows
set.seed(1)
bc <- bcancer[sample(nrow(bcancer)),]
#remove all the rows that contain missing data
bc <- na.omit(bc)
#divide the data into training and testing sets corresponding to 80% and 20% of data respectively.
n <- nrow(bc)
ntrain <- round(0.8*n)
bc_train <- bc[1:ntrain,]
bc_test <- bc[(ntrain+1):n,]
#creating the data structures corresponding to the outcome of the experiment to be predicted by ML algorithm.
bc_train_label <- bc_train[,ncol(bc_train)]
bc_test_label <- bc_test[,ncol(bc_test)]
#check if the outcome are numeric, because we want to predict numeric outcomes.
is.numeric(bc_train_label)        #should be TRUE
is.numeric(bc_test_label)         #should be TRUE
#creating the testing data used as the input data by ML algorithm to predict the outcome. Need to ignore predict labels.
bc_train_data <- bc_train[,1:(ncol(bc_train)-1)]
bc_test_data <- bc_test[,1:(ncol(bc_test)-1)]
#save all the created data in the sub-directory "data".
save(bc_train_data, bc_train_label, bc_test_data, bc_test_label, file = "bcancer_pred.rda")      #uncomment if needed.
save(bcancer, file = "bcancer_pred.rda")     #uncomment if needed
#read the newly created package finalprojectbreastcancer and check the data variables in it(training and testing).
data(bcancer, package = "finalprojectbreastcancer")
ls(pattern = "ha.*")
#look the 1st line of the training data and training outcome.
head(bc_train_data)
head(bc_train_label)
#convert the outcome into logical
bc_train_label <- as.logical(bc_train_label)
bc_test_label <- as.logical(bc_test_label)
# Summary statistics of the variables:
summary(bcancer[c("radius_mean")])
library(C50)
library(class)
library(e1071)
#knnresult <- knn(bc_train_data, bc_test_data, bc_train_label)
#convert knnresult into logical
#knnresult <- as.logical(knnresult)
nbmodel <- naiveBayes(bc_train_data, bc_train_label)
nbpred <- predict(nbmodel, bc_test_data)
nbmodel <- naiveBayes(bc_train_data, bc_train_label)
nbpred <- predict(nbmodel, bc_test_data)
knitr::opts_chunk$set(echo = TRUE)
library(finalprojectbreastcancer)
bcancer <-read.csv(file="C:/Users/Admin/Documents/finalprojectbreastcancer/data-raw/data.csv",stringsAsFactors = FALSE, header= TRUE)
##obtaining the data
#make data-raw directory
#usethis::use_data_raw()        #uncomment if required
#print the columns of the dataset.
print(colnames(bcancer))
##exploring the data
knitr::kable(head(bcancer))
##preparing the data. (bc=breast cancer)
#randomly shuffle the rows
set.seed(1)
bc <- bcancer[sample(nrow(bcancer)),]
#remove all the rows that contain missing data
bc <- na.omit(bc)
#divide the data into training and testing sets corresponding to 80% and 20% of data respectively.
n <- nrow(bc)
ntrain <- round(0.8*n)
bc_train <- bc[1:ntrain,]
bc_test <- bc[(ntrain+1):n,]
#creating the data structures corresponding to the outcome of the experiment to be predicted by ML algorithm.
bc_train_label <- bc_train[,ncol(bc_train)]
bc_test_label <- bc_test[,ncol(bc_test)]
#check if the outcome are numeric, because we want to predict numeric outcomes.
is.numeric(bc_train_label)        #should be TRUE
is.numeric(bc_test_label)         #should be TRUE
#creating the testing data used as the input data by ML algorithm to predict the outcome. Need to ignore predict labels.
bc_train_data <- bc_train[,1:(ncol(bc_train)-1)]
bc_test_data <- bc_test[,1:(ncol(bc_test)-1)]
#save all the created data in the sub-directory "data".
#save(bc_train_data, bc_train_label, bc_test_data, bc_test_label, file = "bcancer_pred.rda")      #uncomment if needed.
#save(bcancer, file = "bcancer_pred.rda")     #uncomment if needed
#read the newly created package finalprojectbreastcancer and check the data variables in it(training and testing).
data(bcancer, package = "finalprojectbreastcancer")
ls(pattern = "ha.*")
#look the 1st line of the training data and training outcome.
head(bc_train_data)
head(bc_train_label)
#convert the outcome into logical
bc_train_label <- as.logical(bc_train_label)
bc_test_label <- as.logical(bc_test_label)
nbmodel <- naiveBayes(bc_train_data, bc_train_label)
bc_test_data <- bc_test[,1:(ncol(bc_test)-1)]
bc_test_data
bc_test_data
nbpred <- predict(nbmodel, bc_test_data)
data.frame$diagnosis [data.frame$diagnosis == "M"] <- 1
data$diagnosis [data.frame$diagnosis == "M"] <- 1
data$diagnosis [data$diagnosis == "M"] <- 1
bcancer$diagnosis [bcancer$diagnosis == "M"] <- 1
knitr::opts_chunk$set(echo = TRUE)
library(finalprojectbreastcancer)
bcancer <-read.csv(file="C:/Users/Admin/Documents/finalprojectbreastcancer/data-raw/data.csv",stringsAsFactors = FALSE, header= TRUE)
##obtaining the data
#make data-raw directory
#usethis::use_data_raw()        #uncomment if required
#convert M and B into hard coded 1 (M) and 0 (B)
bcancer$diagnosis [bcancer$diagnosis == "M"] <- 1
bcancer$diagnosis [bcancer$diagnosis == "B"] <- 0
#print the columns of the dataset.
print(colnames(bcancer))
##exploring the data
knitr::kable(head(bcancer))
##preparing the data. (bc=breast cancer)
#randomly shuffle the rows
set.seed(1)
bc <- bcancer[sample(nrow(bcancer)),]
#remove all the rows that contain missing data
bc <- na.omit(bc)
#divide the data into training and testing sets corresponding to 80% and 20% of data respectively.
n <- nrow(bc)
ntrain <- round(0.8*n)
bc_train <- bc[1:ntrain,]
bc_test <- bc[(ntrain+1):n,]
#creating the data structures corresponding to the outcome of the experiment to be predicted by ML algorithm.
bc_train_label <- bc_train[,ncol(bc_train)]
bc_test_label <- bc_test[,ncol(bc_test)]
#check if the outcome are numeric, because we want to predict numeric outcomes.
is.numeric(bc_train_label)        #should be TRUE
is.numeric(bc_test_label)         #should be TRUE
#creating the testing data used as the input data by ML algorithm to predict the outcome. Need to ignore predict labels.
bc_train_data <- bc_train[,1:(ncol(bc_train)-1)]
bc_test_data <- bc_test[,1:(ncol(bc_test)-1)]
#save all the created data in the sub-directory "data".
#save(bc_train_data, bc_train_label, bc_test_data, bc_test_label, file = "bcancer_pred.rda")      #uncomment if needed.
#save(bcancer, file = "bcancer_pred.rda")     #uncomment if needed
#read the newly created package finalprojectbreastcancer and check the data variables in it(training and testing).
data(bcancer, package = "finalprojectbreastcancer")
ls(pattern = "ha.*")
#look the 1st line of the training data and training outcome.
head(bc_train_data)
head(bc_train_label)
#convert the outcome into logical
bc_train_label <- as.logical(bc_train_label)
bc_test_label <- as.logical(bc_test_label)
# Summary statistics of the variables:
summary(bcancer[c("radius_mean")])
library(C50)
library(class)
library(e1071)
#knnresult <- knn(bc_train_data, bc_test_data, bc_train_label)
#convert knnresult into logical
#knnresult <- as.logical(knnresult)
nbmodel <- naiveBayes(bc_train_data, bc_train_label)
nbpred <- predict(nbmodel, bc_test_data)
nbmodel <- naiveBayes(bc_train_data, bc_train_label)
nbpred <- predict(nbmodel, bc_test_data)
nbmodel <- naiveBayes(bc_train_data, bc_train_label)
nbpred <- predict(nbmodel, bc_test_data)
knitr::opts_chunk$set(echo = TRUE)
library(finalprojectbreastcancer)
bcancer <-read.csv(file="C:/Users/Admin/Documents/finalprojectbreastcancer/data-raw/data.csv",stringsAsFactors = FALSE, header= TRUE)
##obtaining the data
#make data-raw directory
#usethis::use_data_raw()        #uncomment if required
#convert M and B into hard coded 1 (M) and 0 (B)
bcancer$diagnosis [bcancer$diagnosis == "M"] <- 1
bcancer$diagnosis [bcancer$diagnosis == "B"] <- 0
#print the columns of the dataset.
print(colnames(bcancer))
##exploring the data
knitr::kable(head(bcancer))
##preparing the data. (bc=breast cancer)
#randomly shuffle the rows
set.seed(1)
bc <- bcancer[sample(nrow(bcancer)),]
#remove all the rows that contain missing data
bc <- na.omit(bc)
#divide the data into training and testing sets corresponding to 80% and 20% of data respectively.
n <- nrow(bc)
ntrain <- round(0.8*n)
bc_train <- bc[1:ntrain,]
bc_test <- bc[(ntrain+1):n,]
#creating the data structures corresponding to the outcome of the experiment to be predicted by ML algorithm.
bc_train_label <- bc_train[,ncol(bc_train)]
bc_test_label <- bc_test[,ncol(bc_test)]
#check if the outcome are numeric, because we want to predict numeric outcomes.
is.numeric(bc_train_label)        #should be TRUE
is.numeric(bc_test_label)         #should be TRUE
#creating the testing data used as the input data by ML algorithm to predict the outcome. Need to ignore predict labels.
bc_train_data <- bc_train[,1,drop=F:(ncol(bc_train)-1)]
bc_test_data <- bc_test[,1,drop=F:(ncol(bc_test)-1)]
#save all the created data in the sub-directory "data".
#save(bc_train_data, bc_train_label, bc_test_data, bc_test_label, file = "bcancer_pred.rda")      #uncomment if needed.
#save(bcancer, file = "bcancer_pred.rda")     #uncomment if needed
#read the newly created package finalprojectbreastcancer and check the data variables in it(training and testing).
data(bcancer, package = "finalprojectbreastcancer")
ls(pattern = "ha.*")
#look the 1st line of the training data and training outcome.
head(bc_train_data)
head(bc_train_label)
#convert the outcome into logical
bc_train_label <- as.logical(bc_train_label)
bc_test_label <- as.logical(bc_test_label)
knitr::opts_chunk$set(echo = TRUE)
library(finalprojectbreastcancer)
bcancer <-read.csv(file="C:/Users/Admin/Documents/finalprojectbreastcancer/data-raw/data.csv",stringsAsFactors = FALSE, header= TRUE)
##obtaining the data
#make data-raw directory
#usethis::use_data_raw()        #uncomment if required
#convert M and B into hard coded 1 (M) and 0 (B)
bcancer$diagnosis [bcancer$diagnosis == "M"] <- 1
bcancer$diagnosis [bcancer$diagnosis == "B"] <- 0
#print the columns of the dataset.
print(colnames(bcancer))
##exploring the data
knitr::kable(head(bcancer))
##preparing the data. (bc=breast cancer)
#randomly shuffle the rows
set.seed(1)
bc <- bcancer[sample(nrow(bcancer)),]
#remove all the rows that contain missing data
bc <- na.omit(bc)
#divide the data into training and testing sets corresponding to 80% and 20% of data respectively.
n <- nrow(bc)
ntrain <- round(0.8*n)
bc_train <- bc[1:ntrain,]
bc_test <- bc[(ntrain+1):n,]
#creating the data structures corresponding to the outcome of the experiment to be predicted by ML algorithm.
bc_train_label <- bc_train[,ncol(bc_train)]
bc_test_label <- bc_test[,ncol(bc_test)]
#check if the outcome are numeric, because we want to predict numeric outcomes.
is.numeric(bc_train_label)        #should be TRUE
is.numeric(bc_test_label)         #should be TRUE
#creating the testing data used as the input data by ML algorithm to predict the outcome. Need to ignore predict labels.
bc_train_data <- bc_train[,1,drop=F:(ncol(bc_train)-1)]
bc_test_data <- bc_test[,1,drop=F:(ncol(bc_test)-1)]
#save all the created data in the sub-directory "data".
#save(bc_train_data, bc_train_label, bc_test_data, bc_test_label, file = "bcancer_pred.rda")      #uncomment if needed.
#save(bcancer, file = "bcancer_pred.rda")     #uncomment if needed
#read the newly created package finalprojectbreastcancer and check the data variables in it(training and testing).
data(bcancer, package = "finalprojectbreastcancer")
ls(pattern = "ha.*")
#look the 1st line of the training data and training outcome.
head(bc_train_data)
head(bc_train_label)
#convert the outcome into logical
bc_train_label <- as.logical(bc_train_label)
bc_test_label <- as.logical(bc_test_label)
# Summary statistics of the variables:
summary(bcancer[c("radius_mean")])
library(C50)
library(class)
library(e1071)
#knnresult <- knn(bc_train_data, bc_test_data, bc_train_label)
#convert knnresult into logical
#knnresult <- as.logical(knnresult)
nbmodel <- naiveBayes(bc_train_data, bc_train_label)
nbpred <- predict(nbmodel, bc_test_data)
nbmodel <- naiveBayes(bc_train_data, bc_train_label)
nbpred <- predict(nbmodel, bc_test_data)
bc_train_data
bc_train_label
bc_test_data
bc_test_label
